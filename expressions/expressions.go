// Package expressions is a simple expression evaluator. It supports
// a rudementary symbol table with scoping, and knows about four data
// types (string, integer, double, and boolean). It does type casting as
// need automatically.
//
// The general pattern of use is:
//
//    e := expressions.New("expression string")
//    v, err := e.Eval(symbols.SymbolTable)
//
//	If the expression is to be evaluated only once, then you can simplify
//	the evaluation to:
//
//    v, err := expressions.Evaluate("expr string", *symbols.SymbolTable)
//
//  The value is returned as an opaque interface{} type. You can use the
//  following helper functions to retrieve the value from the interface,
//  and coerce the type if possible.
//
//    i := GetInt(v)
//    f := GetFloat(v)
//    s := GetString(v)
//    b := GetBool(v)
//
package expressions

import (
	"github.com/tucats/gopackages/app-cli/persistence"
	"github.com/tucats/gopackages/bytecode"
	"github.com/tucats/gopackages/compiler"
	"github.com/tucats/gopackages/symbols"
	"github.com/tucats/gopackages/tokenizer"
)

// Expression is the type for an instance of the expresssion evaluator.
type Expression struct {
	t   *tokenizer.Tokenizer
	b   *bytecode.ByteCode
	err error
}

// New creates a new Expression object. The expression to evaluate is
// provided.
func New(expr string) *Expression {

	e := &Expression{}

	// Create a compiler object and attach the tokenized expression
	cx := compiler.NewWithTokens(tokenizer.New(expr))
	cx.LowercaseIdentifiers = persistence.GetBool("case-normalized")

	// compile the code, store the generated bytecode and the
	// error, if any.
	e.b, e.err = cx.Expression()

	return e

}

// NewWithTokenizer creates a new Expression object. The expression to evaluate is
// provided.
func NewWithTokenizer(t *tokenizer.Tokenizer) *Expression {

	cx := compiler.New()
	cx.LowercaseIdentifiers = persistence.GetBool("case-normalized")

	e := &Expression{}

	// tokenized already, just attach in progress
	e.t = t

	// compile
	e.b, e.err = cx.Expression()

	return e

}

// NewWithBytecode allocates an expression object and
// attaches the provided bytecode structure.
func NewWithBytecode(b *bytecode.ByteCode) *Expression {
	var e = Expression{}
	var ep = &e
	ep.b = b
	return ep

}

// Error returns the last error seen on the expression object.
func (e *Expression) Error() error {
	return e.err
}

// Disasm calls the bytecode disassembler.
func (e *Expression) Disasm() {
	e.b.Disasm()
}

// GetBytecode returns the active bytecode for the expression
func (e *Expression) GetBytecode() *bytecode.ByteCode {
	return e.b
}

// Evaluate is a helper function for the case where a string is to
// be evaluated once and the value returned.
func Evaluate(expr string, s *symbols.SymbolTable) (interface{}, error) {
	return New(expr).Eval(s)
}
